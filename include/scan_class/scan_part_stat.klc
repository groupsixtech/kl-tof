PROGRAM class_name
%NOBUSYLAMP
%COMMENT = 'scan part'
%NOLOCKGROUP

-- SCN_END_FLG is a flag used to end the scanning process
-- use this flag in motion program to stop the scanning process

%ifeq DEBUG_BUILD FALSE
%undef DEBUG_BUILD
%endif

%ifeq DEBUG_PLOT_POINTS FALSE
%undef DEBUG_PLOT_POINTS
%endif

%ifdef DEBUG_PLOT_POINTS
%define PLOT_NAME 'RD:path_plot.DT'
%endif

%ifeq TRACK_GRP 0
%undef TRACK_GRP
%endif

%include namespace.m

--program members
%include kliotyps.kl
%include systemvars.klt
%include systemlib.datatypes.klt
%include errors.klt
%include display.c.klt
%include csv.klt
%include pose.const.klt
%include pathlib.klt
%include toolpath.structs.klt

--define robot
%ifdef motion_type
motion_type(MOTION_DATA_FILE)
%endif

%include scan_part.klt

%define BASE_CLASSNAME class_name

VAR
  pipe_sema : INTEGER -- semaphore for passing control of writing to pip or csv file
  last_range  FROM SENSOR_CLASS : REAL --averaged sensor readings
  csv_name : STRING[20]
  csv_file : FILE
  tof_task : BOOLEAN
  time_out : BOOLEAN
  counter : INTEGER
  last_read : INTEGER
  scan_finish : INTEGER -- Flag for ending csv writing during scanning
  status  : INTEGER
  idod_   : INTEGER

  coord_sys : t_COORD_SYS
  rbt_pos 	:	MOTION_DATA_TYPE

  rotary : ARRAY[2] OF REAL

  coord : VECTOR
  orient : VECTOR

%from errors.klh %import karelError, CHK_STAT
%include display.klh
%from strings.klh %import i_to_s, r_to_s, pose_to_s
%from registers.klh %import get_string
%from systemlib.klh %import VEC
%include pose.klh
%include multitask.klh
%from files.klh %import check_open
%include csv.klh

-- Robot pose implementation
impl_motion_members(MOTION_DATA_FILE)

--sensor object
sensor_object_define(SENSOR_CLASS,SENSOR_TEMPLATE)

-- csv pipe object
%class csvpip('csvclass.klc','csvclass.klh')

-- user display log
%class usrdis('dispclass.klc','dispclass.klh')

%ifdef DEBUG_PLOT_POINTS
-- plot debug
%class usrplt('dispclass.klc','dispclass.klh')
%endif

%defeval class_name BASE_CLASSNAME

%include scan_part.klh

ROUTINE init
  BEGIN
    coord_sys.system = crd_sys
    coord_sys.z_axis = crd_axs
    orient = orientation
  END init

ROUTINE new
  BEGIN
    coord_sys.system = PTH_CYLINDER
    coord_sys.z_axis = Z_AXES
    orient = VEC(0,0,0)
  END new

ROUTINE set_orientation
  BEGIN
    orient = orientation
  END set_orientation

ROUTINE set_coord_sys
  BEGIN
    coord_sys.system = crd_sys
    coord_sys.z_axis = crd_axs
  END set_coord_sys

ROUTINE set_scan_finished
  BEGIN
    --end scan
    SET_PORT_VAL(io_anin, SCN_END_FLG, 1, status)
  END set_scan_finished

ROUTINE log_pose
  VAR
    p : XYZWPR
    rngPos : XYZWPR
    origin : XYZWPR
  BEGIN
    --block interrupt until completion
    --put after ranging in case point is out of range and being skipped
    DISABLE CONDITION[INRPT_LOGPOS]

    IF NOT task__is_task_running('SENSOR_CLASS') THEN
      usrdis__print(WARN,'SENSOR_CLASS failed')
      tof_task = task__thread('SENSOR_CLASS')
      DELAY CYCLE_TIME
    ENDIF

    --increment counter
    counter = counter + 1

    --get current robot position
    rbt_pos = set_lpos

    --set origin
    origin = (ZEROPOS(1))
    --convert coord sys
    SELECT coord_sys.system OF
      CASE(PTH_CARTESAN):
        p = get_cart(rbt_pos)
      CASE(PTH_CYLINDER):
        --get position
        p = get_cart(rbt_pos)

        -- Theta
        p.x = get_component(rbt_pos, ROT_GRP, ROTARY_JNT)

        IF p.x < 0 THEN
          p.x = 360 + p.x
        ENDIF

        --z-dist
%ifdef TRACK_GRP
        --track
        p.y = get_component(rbt_pos, RBT_GRP, 3) - get_component(rbt_pos, TRACK_GRP, TRACK_AXES) -- track in world frame
%else
        p.y = get_component(rbt_pos, RBT_GRP, 3)
%endif
        -- radius
        -- ?? Should change cylindrical mapping
        p.z = get_component(rbt_pos, RBT_GRP, 2)
      CASE(PTH_POLAR):
        karelError(INVALID_TYPE_CODE, 'polar conversion for scan has not been added yet', ER_ABORT)
    ENDSELECT

    --update radius with height offset
    --if out of range will return uninitialized
    IF NOT UNINIT(last_range) THEN
      -- ?? Should change cylindrical mapping
      p.z = p.z + last_range
    ENDIF

    coord.x = p.x ; coord.y = p.z ; coord.z = p.y ; 

    --block writing to pipe in case data is
    --being read from pipe
    PEND_SEMA(pipe_sema, -1, time_out)

    usrdis__print(DEBUG,'sensor val[' + i_to_s(counter) + ']: ' + r_to_s(last_range))
    usrdis__print(DEBUG,'pose[' + i_to_s(counter) + ']: ' + pose_to_s(p, ','))

    --write vector to pipe
    csvpip__write_row_vector(coord)

    POST_SEMA (pipe_sema)

    -- unblock interrupt
    scan_trigger_reset
    ENABLE CONDITION[INRPT_LOGPOS]
    
  END log_pose


-- **********************

BEGIN
  CONDITION[INRPT_LOGPOS]:
    WHEN scan_trigger_condition DO --TRIGGER to SNAP the laser value
      -- log lpos to pipe
      log_pose
  ENDCONDITION

  --clear display
  display__clear

  --construct debug log
  --(log_filename, show_date, show_debug, show_info)
%ifdef DEBUG_BUILD
  usrdis__new('', FALSE, TRUE, TRUE)
%else
  usrdis__new('', FALSE, FALSE, TRUE)
%endif

%ifdef DEBUG_PLOT_POINTS
  -- PLOT_NAME
  usrplt__new(PLOT_NAME, FALSE, TRUE, TRUE)
  usrplt__clear_file
%endif

  --set frame for getting lpos in correct frame
  pose__set_userframe(USER_FRAME_NO, RBT_GRP)
  pose__set_toolframe(TOOL_FRAME_NO, RBT_GRP)

  --reset inturrupt & condition
  DISABLE CONDITION[INRPT_LOGPOS]
  scan_trigger_reset

  --reset pause flag used to pause motion
  SET_PORT_VAL(io_flag, SCN_PATH_FLG, 0, status)
  CHK_STAT(status)
  --reset scan end flag
  SET_PORT_VAL(io_flag, SCN_END_FLG, 0, status)
  CHK_STAT(status)

  --resetn point count
  counter = 0
  last_read = 0

  csv_name = 'FR:SCAN_FILENAME'
  --create csv file
  csv__create(csv_name, csv_file)
  --clear file if exists
  csv__clear(csv_name, csv_file)

  --initialize csv pipe
  --insert header 'theta,z,r'
  csvpip__new(PIPE_FILE, ',', CYLINDRICAL_HEADER)
  csvpip__set_maxlines(MAX_PIPE)
  --write feildnames
  csvpip__write_fieldnames

  --start semaphore for writing to csv pipe
  pipe_sema = CSV_SEMA
  CLEAR_SEMA (pipe_sema)
  --make writing immediately available
  POST_SEMA (pipe_sema)

  --initialize sensor
  `SENSOR_CLASS`__new
  `SENSOR_CLASS`__set_measurement_type(2)
  DELAY CYCLE_TIME

  --start ranging task of sensor
  tof_task = task__thread('SENSOR_CLASS')
  IF NOT tof_task THEN
      karelError(RUN_TASK_FAILED, 'tof sensor did not start',ER_ABORT)
  ENDIF

  --open csv file to write to
  csv__open(csv_name, 'AP', csv_file)

  --enable logging interrupt
  ENABLE CONDITION[INRPT_LOGPOS]

  --while loop for writing pipe into csv file
  --once a certain number of lines have been accrued
  scan_finish = 0
  REPEAT
    --when max number of lines is reached, dump pipe into csv file
    IF csvpip__get_lines_written >= csvpip__get_maxlines THEN
      --wait on semaphore indefinitely as it might take minutes to
      --fill pipe past max lines
      PEND_SEMA(pipe_sema, MAX_DELAY, time_out)
      
      IF NOT time_out THEN
        --pause motion while writing
        SET_PORT_VAL(io_flag, SCN_PATH_FLG, 1, status)
        CHK_STAT(status)
        
        usrdis__print(INFO,'writing points ' + i_to_s(last_read) + '-' + i_to_s(counter))
        --log last read point for log
        last_read = counter

        --check that csv file is open
        status = IO_STATUS(csv_file)
        IF status <> 0 THEN
          -- if file is not open try to reopen it
          csv__close(csv_name, csv_file)
          csv__open(csv_name, 'AP', csv_file)
          DELAY CYCLE_TIME

          -- make sure file is open or abort
          files__check_open(csv_name, csv_file)
        ENDIF

        --write pipe to csv file
        -- (name, file, handle open/close)
        csvpip__write_to_file(csv_name, csv_file, FALSE)
        --clear pipe
        csvpip__clear

        --resume motion
        SET_PORT_VAL(io_flag, SCN_PATH_FLG, 0, status)
        CHK_STAT(status)
      ELSE
        karelError(CANT_WRITE, 'class_name: csv could not be written to in time. Decrease speed.', ER_ABORT)
      ENDIF

      POST_SEMA(pipe_sema)
    ENDIF
    DELAY CYCLE_TIME

    --check that running template has completed
    GET_PORT_VAL(io_flag, SCN_END_FLG, scan_finish, status)
  --must be top level progam to be considered a task
  UNTIL(scan_finish > 0)

  usrdis__print(INFO,'scan path has finished.')

  --cleanup sensor
  DISABLE CONDITION[INRPT_LOGPOS]
  tof_task = task__abort('SENSOR_CLASS')
  `SENSOR_CLASS`__delete

  -- write any remainder data in pipe to csv
  usrdis__print(INFO,'clearing remaining pipe to file.')
  usrdis__print(INFO,'writing points ' + i_to_s(last_read) + '-' + i_to_s(counter) + 'to file')

  -- (name, file, handle open/close)
  csvpip__write_to_file(csv_name, csv_file, FALSE)
  csv__close(csv_name, csv_file)

  csvpip__clear

  csvpip__delete

  usrdis__print(INFO,'scanning has finished. Scan file is written to ' + csv_name)
  --destruct debug log
  usrdis__delete

%ifdef DEBUG_PLOT_POINTS
  usrplt__delete
%endif

  --force show user panel
  display__show

END class_name

