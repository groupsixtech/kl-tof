PROGRAM class_name
%NOBUSYLAMP
%COMMENT = 'Distance Sensor'
%NOLOCKGROUP
%UNINITVARS

%include namespace.m

--port types
%include kliotyps.kl

%include errors.klt
%include tof_sensor_type.klt
%include tof_sensor.klt

%from errors.klh %import SET_UNINIT_R, karelError, CHK_STAT
%from math.klh %import average_real
%include tof_sensor.klh
%include tof_sensor.private.klh

--private
ROUTINE read_measurement_
  BEGIN
    last_range = calib_
    --if laser out of range return uninitialized value

    --range should be 0->(this.m*this.max+this.b)
    --contiguous digital range, can just use
    --analog value and max const as out of range
    --value is the same above or below.
    IF (this.mode=MODE_0_5V) AND (AIN[this.pin] > this.max) THEN
      SET_UNINIT_R('class_name', 'last_range')
    ELSE IF (this.mode=MODE_5_5V) AND (ABS(last_range) > this.m*this.max) THEN
      SET_UNINIT_R('class_name', 'last_range')
    ENDIF
    ENDIF
  END read_measurement_

ROUTINE read_range_
  VAR
    time_out : BOOLEAN
    i : INTEGER
  BEGIN
    --ranging measurement is a rolling
    --list of values updated every 
    --MAX_SAMPLES*SAMPLE_TIME ms
    IF this.last_index > MAX_SAMPLES THEN
      this.last_index = 1
    ENDIF

    --get measurement
    this.measuremnts[this.last_index] = calib_

    -- warning.. might not be a solution?????
    --if laser out of range uninitialize whole sample
    IF (this.mode=MODE_0_5V) AND (AIN[this.pin] > this.max) THEN
      this.measuremnts = uninit_r
    ELSE IF (this.mode=MODE_5_5V) AND (ABS(this.measuremnts[this.last_index]) > this.m*this.max) THEN
      this.measuremnts = uninit_r
    ENDIF
    ENDIF

    this.last_index = this.last_index + 1

    --average to get mean reading
    --averaging ignores uninitalized values
    -- warning.. if all values are uninitialized
    --           function returns 0. May not be
    --           desirable
    last_range = math__average_real(this.measuremnts)
  END read_range_

ROUTINE read_signal_
  BEGIN

%ifeq SIGNAL_TYPE VIRTUAL
    IF (this.mode=MODE_0_5V) AND (AIN[this.pin] <= this.max) THEN
      is_signal = TRUE
    ELSE IF (this.mode=MODE_5_5V) AND (ABS(last_range) <= this.m*this.max) THEN
      is_signal = TRUE
    ELSE
      is_signal = FALSE
    ENDIF
    ENDIF
    --set DOUT pin
    SIGNAL_TYPE_STR = is_signal
%else
%ifeq SIGNAL_TYPE PHYSICAL
    is_signal = SIGNAL_TYPE_STR
%else
%error 'SIGNAL_TYPE must be specified as VIRTUAL or PHYSICAL'
%endif
%endif
  END read_signal_

ROUTINE read_zero_
  BEGIN

%ifeq ZERO_TYPE VIRTUAL
    IF ABS(last_range) < ZERO_TOLERANCE THEN
      zeroed = TRUE
    ELSE
      zeroed = FALSE
    ENDIF
    --set DOUT pin
    ZERO_TYPE_STR = zeroed
%else
%ifeq ZERO_TYPE PHYSICAL
    zeroed = ZERO_TYPE_STR
%else
%error 'ZERO_TYPE must be specified as VIRTUAL or PHYSICAL'
%endif
%endif
  END read_zero_

--routine to convert analog signal to real value
ROUTINE calib_
  BEGIN
    SELECT this.mode OF
      CASE(MODE_4_20MA):
        karelError(INVALID_TYPE_CODE, '4-20 ma has not been implemented yet.', ER_ABORT)
      CASE(MODE_0_5V):
        RETURN(this.m * AIN[this.pin] + this.b)
      CASE(MODE_5_5V):
        IF AIN[this.pin] > this.max THEN
          RETURN(this.m * AIN[this.pin] + this.b)
        ELSE
          RETURN(this.m * AIN[this.pin])
        ENDIF
      ELSE:
        karelError(INVALID_TYPE_CODE, 'tof sensor mode is not properly selected.', ER_ABORT)
    ENDSELECT

  END calib_

--initialization
ROUTINE constructor 
  BEGIN
    --set pin
    this.pin = SENSOR_PIN
    --set analog mode
    this.mode = SENS_MODE
    --set linear interpolation
    this.m = SENS_SLOPE
    this.b = SENS_INTER
    this.max = SENS_MAX
    --set sampling time
    this.sample_time = SAMPLE_MS
    --set ranging index
    this.last_index = 1
    --uninitialize measurement array
    this.measuremnts = uninit_r
    -- ranging type
    this.meas_type = 1 -- default to single measurement

    -- initialize values
    zeroed = FALSE
    is_signal = FALSE
    prev_signal = FALSE
    seen = TRUE
  END constructor

ROUTINE destructor
  BEGIN
    --uninitialize measurement array
    this.measuremnts = uninit_r
    --clear pin number
    this.pin = 0
  END destructor

--set sample time
ROUTINE set_sample_time
  BEGIN
    this.sample_time = smpl_tme
  END set_sample_time

ROUTINE set_measurement_type
  BEGIN
    SELECT meas_type OF
      CASE(1):
        this.meas_type = 1 -- single measurement
      CASE(2):
        this.meas_type = 2 -- averaged measurements
      ELSE:
        karelError(INVALID_TYPE_CODE, 'measurement type for sensor not properly set.', ER_ABORT)
    ENDSELECT
  END set_measurement_type

ROUTINE set_sim_analog
  VAR
    analog_val : INTEGER
    sim : BOOLEAN
    status : INTEGER
  BEGIN
    --check if AI pin is simulated
    GET_PORT_SIM(io_anin, (this.pin), sim, status)
    CHK_STAT(status)
    IF NOT sim THEN
      karelError(PORT_NOT_SIMULATED, 'analog port for tof must be simulated.', ER_ABORT)
    ENDIF
    --calculate digital analog signal
    SELECT this.mode OF
      CASE(MODE_4_20MA):
        karelError(INVALID_TYPE_CODE, '4-20 ma has not been implemented yet.', ER_ABORT)
      CASE(MODE_0_5V):
        analog_val = TRUNC((meas_mm - this.b)/this.m)
      CASE(MODE_5_5V):
        IF (meas_mm < 0) THEN
          analog_val = TRUNC((meas_mm - this.b)/this.m)
        ELSE
          analog_val = TRUNC(meas_mm/this.m)
        ENDIF
      ELSE:
        karelError(INVALID_TYPE_CODE, 'tof sensor mode is not properly selected.', ER_ABORT)
    ENDSELECT
    --set analog signal
    SET_PORT_VAL(io_anin, (this.pin), analog_val, status)
  END set_sim_analog 

--ranging
--public exposure for ranging
ROUTINE read_measurement
  BEGIN
    read_measurement_
    RETURN(last_range)
  END read_measurement

ROUTINE read_range
  VAR
    i : INTEGER
  BEGIN
    FOR i=1 TO MAX_SAMPLES DO
      read_range_
    ENDFOR
    RETURN(last_range)
  END read_range

ROUTINE read_signal
  BEGIN
    read_signal_
    RETURN(is_signal)
  END read_signal

ROUTINE read_zero
  BEGIN
    read_zero_
    RETURN(zeroed)
  END read_zero

ROUTINE watch_rising_edge
  VAR
    b : BOOLEAN
  BEGIN
    b = FALSE
    IF is_signal AND NOT prev_signal THEN b = TRUE ; ENDIF
    seen = TRUE
    RETURN(b)
  END watch_rising_edge

ROUTINE watch_falling_edge
  VAR
    b : BOOLEAN
  BEGIN
    b = FALSE
    IF NOT is_signal AND prev_signal THEN b = TRUE ; ENDIF
    seen = TRUE
    RETURN(b)
  END watch_falling_edge

ROUTINE watch_change
  VAR
    b : BOOLEAN
  BEGIN
    b = FALSE
    IF is_signal <> prev_signal THEN b = TRUE ; ENDIF
    seen = TRUE
    RETURN(b)
  END watch_change


--task
BEGIN
  WHILE(TRUE) DO
    IF (this.meas_type = 1) THEN
      read_measurement_
    ENDIF
    IF (this.meas_type = 2) THEN
      read_range_
    ENDIF

    --determine digital signal
    read_signal_
    --determine if zeros
    read_zero_

    DELAY this.sample_time

    IF seen THEN 
      prev_signal = is_signal
      seen = FALSE
    ENDIF

  ENDWHILE
END class_name

